import netaddr
import os.path
from datetime import datetime
import subprocess
import logging
from ip_control.configuration import config

logger = logging.getLogger('ip-control.bird')
logger.addHandler(logging.handlers.SysLogHandler(address = '/dev/log'))

class BirdConfig(object):
  def __init__(self, version):
    self._networks = set([])
    self.version = 6 if str(version) == '6' else 4
    self._filepath = config.get('General', 'bird{}_dynamic_config'.format(self.version))
    self.save()

  def add_network(self, network):
    self._networks.add(netaddr.IPNetwork(network))

  def remove_network(self, network):
    network = netaddr.IPNetwork(network)
    self._networks.remove(network)

  def has_network(self, network):
    network = netaddr.IPNetwork(network)
    return network in self._networks

  def save(self):
    path = '/'.join(self._filepath.split('/')[:-1])
    if not os.path.exists(path):
      # Create path
      os.makedirs(path)
    # Create/rewrite config file
    try:
      c = open(self._filepath, 'w')
    except:
      logger.exception('Cannot open {}'.format(self._filepath))
      raise
    c.write("# Generated by ip-control at %s. Do not touch this file!\n" % str(datetime.now()))
    # Put our IPs into the file
    for network in self._networks:
      c.write("stubnet {};\n".format(network))
    c.close()
    # Reload our bird
    try:
      subprocess.check_call(config.get('General', 'bird{}_reload'.format(self.version)).split(' '))
    except:
      logger.exception('Got exception when reloading bird{}'.format(self.version))
      raise
